{"version":3,"sources":["raspberryicon.png","add-button.png","magnify.png","round_Add.png","better_add.png","App.js","reportWebVitals.js","index.js"],"names":["item1","id","v4","text","description","item2","item3","item4","App","_useState","useState","localStorage","getItem","_useState2","_slicedToArray","setText","_useState3","_useState4","setDescription","_useState5","_useState6","etext","setEditText","_useState7","_useState8","edescription","setEditDescription","_useState9","_useState10","editingId","setEditingId","_useState11","_useState12","searchText","setSearchText","_useState13","JSON","parse","title","items","css","_useState14","state","setState","handleCancelEdit","useEffect","setItem","stringify","_jsxs","className","children","_jsx","class","height","width","src","raspberrysans","type","value","onChange","e","target","placeholder","autoFocus","onClick","prev","_objectSpread","todo","concat","_toConsumableArray","window","alert","alt","round_add","magnify","DragDropContext","onDragEnd","_ref","destination","source","droppableId","index","itemcopy","console","log","splice","_","map","data","key","style","Droppable","provided","filteredItems","filter","item","toLowerCase","includes","ref","innerRef","droppableProps","element","isEditing","Boolean","Draggable","draggableId","toString","draggableProps","dragHandleProps","columnName","findIndex","_defineProperty","_Fragment","find","handleEdit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbedbf21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/raspberryicon.38d7d5e1.png\";","export default __webpack_public_path__ + \"static/media/add-button.e701f3f7.png\";","export default __webpack_public_path__ + \"static/media/magnify.3fc52293.png\";","export default __webpack_public_path__ + \"static/media/round_Add.fb509f23.png\";","export default __webpack_public_path__ + \"static/media/better_add.a2722edf.png\";","import './App.css';\r\nimport React, { useEffect,useState } from 'react';\r\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\r\nimport _ from \"lodash\";\r\nimport {v4} from \"uuid\";\r\nimport addbutton from './add-button.png';\r\nimport raspberrysans from './raspberryicon.png';\r\nimport magnify from './magnify.png';\r\nimport better_add from './better_add.png'\r\nimport round_add from './round_Add.png'\r\n\r\n// Define initial items\r\nconst item1 = {\r\n  id: v4(),\r\n  text: \"Submit Portfolio by midnight today\",\r\n  description: \"Write up first\"\r\n};\r\n\r\nconst item2 = {\r\n  id: v4(),\r\n  text: \"Send email to Professor Kim\",\r\n  description: \"By tuesday\"\r\n};\r\n\r\nconst item3 = {\r\n  id: v4(),\r\n  text: \"Clean the room 80%\",\r\n  description: \" Do it fast\"\r\n};\r\n\r\nconst item4 = {\r\n  id: v4(),\r\n  text: \"Edit the food vlog (urgent)\",\r\n  description: \" EAT FIRST\"\r\n};\r\nfunction App() {\r\n \r\n  // Define state variables\r\n  const [text, setText] = useState(localStorage.getItem(\"text\") || \"\");\r\n  const [description, setDescription] = useState(localStorage.getItem(\"description\") || \"\");\r\n  // used to store the text and description after eidting the task cards\r\n  const [etext,setEditText]=useState(\"\")\r\n  const [edescription,setEditDescription]=useState(\"\")\r\n  // Tracks the editing id\r\n  const [editingId, setEditingId] = useState(null);\r\n  // added state variable for search query\r\n  const [searchText, setSearchText] = useState(\"\"); \r\n  const [state, setState] = useState(\r\n    localStorage.getItem(\"state\")\r\n      ? JSON.parse(localStorage.getItem(\"state\"))\r\n      : {\r\n          \"todo\": {\r\n            title: \"To-Do\",\r\n            items: [item1, item2],\r\n            css: {\r\n              \"border-color\": \"#f4b6ff\"\r\n            }\r\n          },\r\n          \"inprogress\": {\r\n            title: \"In-Progress\",\r\n            items: [item4],\r\n            css: {\r\n              \"border-color\": \"#ffb6c1\"\r\n            }\r\n          },\r\n          \"done\": {\r\n            title: \"Achieved\",\r\n            items: [item3],\r\n            css: {\r\n              \"border-color\": \"#c1ffb6\"\r\n            }\r\n          },\r\n          \"delete\": {\r\n            title: \"Delete\",\r\n            items: [],\r\n            css: {\r\n              \"border-color\": \"#b6fff4\"\r\n            }\r\n          }\r\n        }\r\n  );\r\n\r\n  // Funciton Handles the drag and drop feature of cards \r\n  const handleDragEnd = ({destination, source}) => {\r\n    if(!destination)  return;\r\n\r\n    if(destination.droppableId === source.droppableId && destination.index === source) return;\r\n    {/*dropped in same place */}\r\n    const itemcopy = {...state[source.droppableId].items[source.index]}\r\n    console.log(itemcopy);\r\n    if(destination.droppableId === \"delete\" && source.droppableId !== \"delete\"){\r\n      {/*deleteing an item */}\r\n      setState(prev =>{\r\n        prev = {...prev}\r\n        prev[source.droppableId].items.splice(source.index,1);\r\n        return prev;\r\n      })\r\n    }\r\n    else{\r\n      {/*adding an item*/}\r\n    setState(prev =>{\r\n      prev = {...prev}\r\n      prev[source.droppableId].items.splice(source.index,1);\r\n      {/*splice used to delete but also add */}\r\n      prev[destination.droppableId].items.splice(destination.index,0, itemcopy);\r\n      return prev;\r\n    })\r\n\r\n    }\r\n  }\r\n\r\n  \r\n  // Function responds when first clicked on the 'Edit' button on the task cards\r\n  const handleEdit = (columnName, id) => {\r\n    setEditingId(id);\r\n    const item = state[columnName].items.find(item => item.id === id);\r\n    if (item) {\r\n      // when the item has been edited\r\n      setEditText(item.text);\r\n      setEditDescription(item.description);\r\n    } else {\r\n      setEditText('');\r\n      setEditDescription('');\r\n    }\r\n  };\r\n\r\n\r\n  //Function responds when first clicked on the 'Cancel' button on the task cards after clicking on 'Edit'\r\n  const handleCancelEdit = () => {\r\n    // discard all the typed changes\r\n    setEditingId(null);\r\n    setEditText('');\r\n    setEditDescription('');\r\n  };\r\n \r\n  // Function responds when first clicked on the 'Save' button on the task cards after clicking on 'Edit'\r\n  const handleSave = (columnName) => {\r\n    if (!etext || !edescription) {\r\n      // if there is no text in either of the boxes of title and description then do not save\r\n      window.alert(\"Please enter a title and description before saving.\");\r\n      return;\r\n    }\r\n    setState(prev => {\r\n      const items = [...prev[columnName].items];\r\n      const index = items.findIndex(item => item.id === editingId);\r\n      items[index] = {\r\n        ...items[index],\r\n        text: etext,\r\n        description: edescription\r\n      };\r\n      return {\r\n        ...prev,\r\n        [columnName]: {\r\n          ...prev[columnName],\r\n          items: items\r\n        }\r\n      };\r\n    });\r\n    setEditingId(null);\r\n    setEditText('');\r\n    setEditDescription('');\r\n  };\r\n\r\n \r\n // Function handles adding new items to the list\r\n // Assumption: Given that it is To-do list any new task that the user enters will land straight in the to-do part of the page\r\n // The user can then move the particular task around when the need arises\r\n  const addItem = () => {\r\n    if (!text || !description) {\r\n      // if there is no text in either of the boxes of title and description then do not allow to create card\r\n      window.alert(\"Please enter a title and description before creating a new task.\");\r\n      return;\r\n    }\r\n    setState((prev) => {\r\n      return {\r\n        ...prev,\r\n        todo: {\r\n          title: \"To-Do\",\r\n          items: [\r\n            {\r\n              id: v4(),\r\n              text: text,\r\n              description: description,\r\n            },\r\n            ...prev.todo.items,\r\n          ],\r\n        },\r\n      };\r\n    });\r\n    setText(\"\");\r\n    setDescription(\"\");\r\n  };\r\n\r\n\r\n  // Save state,text and description variables to the browsers local storage \r\n  useEffect(() => {\r\n    localStorage.setItem(\"text\", text);\r\n  }, [text]);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem(\"description\", description);\r\n  }, [description]);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem(\"state\", JSON.stringify(state));\r\n  }, [state]);\r\n\r\n\r\n  \r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <br/>\r\n        <div className=\"username\">  </div>\r\n        <div class=\"header\"> \r\n        <img height=\"50px\" width=\"50px\" src={raspberrysans}/>\r\n        To-do List Application\r\n      </div>\r\n      \r\n      {/* Add to-do item */}\r\n      <div className=\"add_todo\"> \r\n      <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter task title\" autoFocus/>\r\n      <input type=\"description\" value={description} onChange={(e) => setDescription(e.target.value)} placeholder=\"Enter task description\" />\r\n        {/* Add button */}\r\n        <button className=\"addbutton\" onClick={addItem}>  \r\n          <img alt = \"\" src = {round_add} height=\"50px\" width=\"50px\"   class=\"add_button\" />\r\n        </button>\r\n      </div>\r\n       \r\n      \r\n      {/* Search bar */}\r\n      <div className=\"search_bar\">\r\n        <input type=\"text\" value={searchText} onChange={(e) => setSearchText(e.target.value)} placeholder=\"Search tasks\" />\r\n        <img height=\"50px\" width=\"50px\" src={magnify} alt=\"Search\" class=\"search-icon\"/>\r\n      </div>\r\n\r\n\r\n      <div className=\"drop\"> \r\n      <DragDropContext onDragEnd= {handleDragEnd}>\r\n        {/* Map through state object */}\r\n        {_.map(state, (data, key) => {\r\n          return(\r\n            <div key={key} className=\"column\"> \r\n             {/* To-do list title */}\r\n              <h2 className=\"datatitle\" style={data.css}>{data.title}</h2>\r\n                {/* Droppable area */}\r\n                <Droppable droppableId={key}>\r\n                  {(provided) => {\r\n                    // Filter items based on search text\r\n                    const filteredItems = data.items.filter((item) =>\r\n                    item.text.toLowerCase().includes(searchText.toLowerCase()) ||\r\n                    item.description.toLowerCase().includes(searchText.toLowerCase())\r\n                  );\r\n                    return(\r\n                      <div ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                      className=\"droppable_column\"\r\n                      >\r\n                       {/* Map through filtered items */} \r\n                      {filteredItems.map((element, index) => {\r\n                        // Check if editing\r\n                        const isEditing = Boolean(editingId && element.id === editingId );\r\n                          return (\r\n                                <Draggable key={element.id} index={index} draggableId={element.id.toString()}>\r\n                                  {(provided) => {\r\n                                    return (\r\n                                      <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        className=\"draggable_item\"\r\n                                      >\r\n                                        {/* If editing, show input fields */}\r\n                                        {isEditing ? (\r\n                                          <div className=\"input-wrapper\">\r\n                                            <input\r\n                                              type=\"text\"\r\n                                              value={etext}\r\n                                              onChange={(e) => setEditText(e.target.value)}\r\n                                              placeholder=\"Enter task title\"\r\n                                            />\r\n                                            <input\r\n                                              type=\"text\"\r\n                                              value={edescription}\r\n                                              onChange={(e) => setEditDescription(e.target.value)}\r\n                                              placeholder=\"Enter task description\"\r\n                                            />\r\n                                            <button onClick={() => handleSave(key)}>Save</button>\r\n                                            <button onClick={handleCancelEdit}>Cancel</button>\r\n                                          </div>\r\n                                            ) : (\r\n                                              // If not editing, show item details\r\n                                          <>\r\n                                            <h3>{element.text}</h3>\r\n                                            <div className=\"input-wrapper\">\r\n                                              <p>{element.description}</p>\r\n                                            </div>\r\n                                            <button onClick={() => handleEdit(key, element.id)}>\r\n                                              Edit\r\n                                            </button>\r\n                                          </>\r\n                                        )}\r\n                                      </div>\r\n                                    );\r\n                                  }}\r\n                                </Draggable>\r\n                              );\r\n                            })}\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    )\r\n                  }\r\n                  }\r\n\r\n                </Droppable>\r\n              </div>\r\n            \r\n          )\r\n          \r\n        })}\r\n      </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}